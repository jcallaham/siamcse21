# -*- coding: utf-8 -*-
"""rosenbrock_dot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/sriharikrishna/siamcse21/blob/main/rosenbrock_dot.ipynb

#Rosenbrock Dot Product Test
Here we first rewrite the Rosenbrock example from earlier as calls to two functions:

`result =  rosenbrock_vec_2(rosenbrock_vec_1(x))`
"""

import jax
from jax import random
import jax.numpy as jnp
import numpy as np

def rosenbrock(x):
    """
    Computes the Rosenbrock's banana
    x : array of values
    """
    y = rosenbrock_vec_1(x)
    z = rosenbrock_vec_2(y)
    return z

def rosenbrock_vec_1(x):
    """
    Computes the individual summation terms of Rosenbrock's banana
    x : array of values
    """
    y = (100.0 * (x[1:] - x[:-1]**2.0)**2.0 + (1 - x[:-1])**2.0)
    return y

def rosenbrock_vec_2(y):
    """
    Sums the individual terms of Rosenbrock's banana
    y : array of summation terms
    """
    z = sum(y)
    return z

"""We then compute the forward mode partial derivatives.
Create a random vector `x`
"""

#create a random array
n=10
key = random.PRNGKey(0)
x = random.normal(key, (n,), jnp.float64)
print("x", x)

"""## Forward mode
Create a random seed vector `xd` and compute the partials
"""

#Forward mode; create a random seed; compute gradients
key = random.PRNGKey(34234)
xd = random.normal(key, (x.shape), jnp.float64)
print("xd", xd)

y, yd = jax.jvp(rosenbrock_vec_1, (x,),(xd,))
print("yd",yd)

z, zd = jax.jvp(rosenbrock_vec_2, (y,), (yd,))
print("zd",zd)

"""## Reverse Mode
Create a random seed vector `xd` and compute the partials
"""

#Reverse mode; create a random seed; compute adjoints
key = random.PRNGKey(134534)
zb = random.normal(key, (1,), jnp.float64)[0]
print("zb",zb)

_, fun_vjp = jax.vjp(rosenbrock_vec_2, y)
yb = np.array(fun_vjp(zb))
#yb = -yb
print("yb",np.array(yb))

_, fun_vjp = jax.vjp(rosenbrock_vec_1, x)
xb = np.array(fun_vjp(yb[0]))
print("xb", xb)

"""## Dot Products
Compute the dot products
"""

#Compute the dot products
print("jnp.dot(xb,xd)", jnp.dot(xb,xd))
print("jnp.dot(yb,yd)", jnp.dot(yb,yd))
print("jnp.dot(zb,zd)",jnp.dot(zb,zd))

"""## Exercises
1. Use different seeds for `x`, `xd`, `xb`.
2. Edit the value of `yd` or `yb` after it has been calculated to see the new result of the dot products
"""